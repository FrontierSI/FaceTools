/************************************************************************
 * Copyright (C) 2018 Spatial Information Systems Research Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ************************************************************************/

#ifndef FACE_TOOLS_REPORT_BASE_REPORT_TEMPLATE_H
#define FACE_TOOLS_REPORT_BASE_REPORT_TEMPLATE_H

#include "ReportInterface.h"
#include <LaTeXU3DInserter.h>   // RModelIO

namespace FaceTools {
namespace Report {

// Derived classes should inherit BaseReportTemplate instead of ReportInterface
class FaceTools_EXPORT BaseReportTemplate : public ReportInterface
{ Q_OBJECT
public:
    BaseReportTemplate( const QString& dname) : _dname(dname) {}

    QString getDisplayName() const override { return _dname;}

    bool isAvailable( const FaceModel*) const override { return true;}

    // Return the title of the report
    virtual std::string reportTitle() const { return "";}

    // Return the number of figures generated by this report.
    virtual size_t figureCount() const { return 0;}

    // Create and return the figure inserter for the given figure index.
    // Provide the temporary directory in which U3D models should be exported to.
    virtual RModelIO::LaTeXU3DInserter::Ptr createFigure( size_t,
                                                const std::string&, // Temporary directory in which to construct U3D models
                                                const FaceModel*,   // The model itself
                                                const RFeatures::CameraParams&) // The camera parameters to the model
                                                { return nullptr;}

    // Destroy any cached data relating to the given FaceModel.
    virtual void purge( const FaceModel*){}

private:
    const QString _dname;
    BaseReportTemplate( const BaseReportTemplate&) = delete;
    void operator=( const BaseReportTemplate&) = delete;
};  // end class

}   // end namespace
}   // end namespace

#endif
