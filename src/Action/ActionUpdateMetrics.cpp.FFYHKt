/************************************************************************
 * Copyright (C) 2019 Spatial Information Systems Research Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ************************************************************************/

#include <ActionUpdateMetrics.h>
#include <MetricCalculatorManager.h>
#include <PhenotypeManager.h>
#include <FaceModel.h>
#include <FaceView.h>
#include <QDebug>
#include <algorithm>
using FaceTools::Action::ActionUpdateMetrics;
using FaceTools::Action::FaceAction;
using FaceTools::Action::Event;
using FaceTools::Metric::MC;
using FaceTools::Vis::FV;
using FaceTools::FM;
using MCM = FaceTools::Metric::MetricCalculatorManager;
using FaceTools::Metric::PhenotypeManager;
using FaceTools::Metric::Phenotype;
using FaceTools::Metric::MC;
using MS = FaceTools::Action::ModelSelector;


ActionUpdateMetrics::ActionUpdateMetrics()
{
    setAsync( true);
    addTriggerEvent( Event::METADATA_CHANGE);   // Update statistics
    addTriggerEvent( Event::LANDMARKS_CHANGE);
    addTriggerEvent( Event::SURFACE_DATA_CHANGE);
}   // end ctor


// Ready if at least one of the metrics can be calculated
bool ActionUpdateMetrics::checkEnable( Event)
{
    if ( MS::isViewSelected())
    {
        for ( MC::Ptr mc : MCM::metrics())
        {
            const FM* fm = MS::selectedModel();
            fm->lockForRead();
            const bool canCalc = mc->canCalculate(fm);
            fm->unlock();
            if ( canCalc)
                return true;
        }   // end for
    }   // end if
    return false;
}   // end checkEnabled


void ActionUpdateMetrics::doAction( Event)
{
    // Recalculate all metrics
    FM *fm = MS::selectedModel();
    fm->lockForWrite();
    fm->clearPhenotypes();

    for ( MC::Ptr mc : MCM::metrics())
    {
        if ( mc->canCalculate(fm))
            mc->calculate(fm);
    }   // end for

    for ( int pid : PhenotypeManager::ids())
    {
        Phenotype::Ptr pt = PhenotypeManager::phenotype(pid);
        if ( pt->isPresent( fm))
        {
            std::cerr << QString("%1 (%2) detected").arg(pt->name()).arg(pt->id()).toStdString() << std::endl;
            for ( int mid : pt->metrics())
            {
                if ( fm->cmetrics().get(mid) != nullptr)
                {
                    const Metric::MetricValue& mv = *fm->cmetrics().get(mid);
                    std::cerr << " -- " << MCM::metric(mid)->name().toStdString() << " value = "
                              << mv.value() << " z-score = " << mv.zscore() << std::endl;
                }   // end if
            }   // end for
            fm->addPhenotype(pid);
        }   // end if
    }   // end for
    fm->unlock();
}   // end doAction


void ActionUpdateMetrics::doAfterAction( Event)
{
    MS::clearStatus();
    const size_t np = MS::selectedModel()->phenotypes().size();
    if ( np > 0)
        MS::showStatus( QString("Matched %1 phenotypic trait%2 (check measurements).").arg(np).arg(np > 1 ? "s" : ""), 10000);
    emit onEvent(Event::METRICS_CHANGE);
}   // end doAfterAction
